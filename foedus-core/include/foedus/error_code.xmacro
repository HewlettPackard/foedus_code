/*
 * Copyright (c) 2014, Hewlett-Packard Development Company, LP.
 * The license and distribution terms for this file are placed in LICENSE.txt.
 */

/*
 * Syntax: X(<error code name>, <integer value of the error code>, <error message>)
 *
 * To add new errors, just insert at an arbitrary place, but note that the value of
 * error codes must be unique. To maintain that as easy as possible, you keep the entries
 * sorted by the value.
 *
 * A general naming rule: kErrorCode<module name>_<error name>.
 * For example, kErrorCodeEngineInvalidOption.
 * A general error code like out-of-memory might omit module names.
 */
X(kErrorCodeOutofmemory,            0x0001, "GENERAL: Out of memory")
X(kErrorCodeInvalidParameter,       0x0002, "GENERAL: Invalid parameter given")
X(kErrorCodeAlreadyInitialized,     0x0003, "GENERAL: Already initialized")
X(kErrorCodeBatchedError,           0x0004, "GENERAL: More than one errors observed")
X(kErrorCodeDepedentModuleUnavailableInit,      0x0005, "GENERAL: A dependent module is not initialized yet. This implies a wrong initialization order in EnginePimpl.")
X(kErrorCodeDepedentModuleUnavailableUninit,    0x0006, "GENERAL: A dependent module is already uninitialized. This implies a wrong uninitialization order in EnginePimpl.")
X(kErrorCodeBeingShutdown,          0x0007, "GENERAL: The engine is being shutdown.")
X(kErrorCodeTimeout,                0x0008, "GENERAL: Timeout.")
X(kErrorCodeNotimplemented,         0x0009, "GENERAL: Not implemented yet.")

X(kErrorCodeEngineInvalidOption,    0x0101, "ENGINE : Invalid Option")

X(kErrorCodeFsAlreadyOpened,    0x0201, "FILESYS: Already opened")
X(kErrorCodeFsFailedToOpen,     0x0202, "FILESYS: Failed to open a file")
X(kErrorCodeFsBadSeekInput,     0x0203, "FILESYS: Invalid arguments for seek()")
X(kErrorCodeFsSeekFailed,       0x0204, "FILESYS: file seek failed")
X(kErrorCodeFsBufferTooSmall,   0x0205, "FILESYS: file buffer is too small")
X(kErrorCodeFsBufferNotAligned, 0x0206, "FILESYS: file buffer is not aligned")
X(kErrorCodeFsTooShortRead,     0x0207, "FILESYS: reached end of file before completing reads")
X(kErrorCodeFsExcessRead,       0x0208, "FILESYS: read more than expected")
X(kErrorCodeFsWriteFail,        0x0209, "FILESYS: Disk write failed.")
X(kErrorCodeFsExcessWrite,      0x020A, "FILESYS: wrote more than expected")
X(kErrorCodeFsNotOpened,        0x020B, "FILESYS: File not opened yet or failed to open.")
X(kErrorCodeFsSyncFailed,       0x020C, "FILESYS: fsync() failed.")
X(kErrorCodeFsMkdirFailed,      0x020D, "FILESYS: Failed to create a directory")
X(kErrorCodeFsTruncateFailed,   0x020E, "FILESYS: File truncation failed")
X(kErrorCodeFsResultNotAligned, 0x020F, "FILESYS: Direct I/O operation resulted in non-aligned count of bytes. Filesyste bug?")

X(kErrorCodeMemoryNoFreePages,  0x0301, "MEMORY : Not enough free volatile pages. Check the config of MemoryOptions")
X(kErrorCodeMemoryDuplicatePage,    0x0302, "MEMORY : Duplicate entry in free-page pool.")
X(kErrorCodeMemoryPagePoolTooSmall, 0x0303, "MEMORY : Page Pool size is too small.")
X(kErrorCodeMemoryNumaUnavailable,  0x0304, "MEMORY : NUMA library is not available.")

X(kErrorCodeConfParseFailed,        0x0401, "CONFIG : Config file parsing failed. This usually means an invalid XML file.")
X(kErrorCodeConfValueOutofrange,    0x0402, "CONFIG : Configuration value out of range.")
X(kErrorCodeConfMissingElement,     0x0403, "CONFIG : The xml element is missing in the config file.")
X(kErrorCodeConfInvalidElement,     0x0404, "CONFIG : An invalid valud in the xml element.")
X(kErrorCodeConfEmptyXml,           0x0405, "CONFIG : No root element in the xml.")
X(kErrorCodeConfFileNotFount,       0x0406, "CONFIG : The file doesn't exist.")
X(kErrorCodeConfCouldNotWrite,      0x0407, "CONFIG : Failed to write a configuration file.")
X(kErrorCodeConfCouldNotRename,     0x0408, "CONFIG : Failed to atomically rename the temporary file to destination.")
X(kErrorCodeConfMkdirsFailed,       0x0409, "CONFIG : Failed to create a directory. Check permissions.")

X(kErrorCodeLogInvalidLoggerCount,  0x0501, "LOG    : The number of loggers per node must be a submultiple of the number of cores in the node. Check the settings in LogOptions")
X(kErrorCodeLogInvalidApplyType,    0x0502, "LOG    : This log type does not support this type of apply")
X(kErrorCodeLogInvalidLogType,      0x0503, "LOG    : LOG_TYPE_INVALID")

X(kErrorCodeSnapshotInvalidLogEnd,  0x0601, "SNAPSHT: Inconsistent end of log entry detected.")
X(kErrorCodeSnapshotCancelled,      0x0602, "SNAPSHT: (internal error code) Snapshot task cancelled.")

X(kErrorCodeSpInconsistentSavepoint, 0x0701, "SAVEPNT: Savepoint file is not consistent with other configurations. Check the number of loggers.")

X(kErrorCodeStrDuplicateStrid,      0x0801, "STORAGE: Duplicate StorageID")
X(kErrorCodeStrAlreadyExists,       0x0802, "STORAGE: This storage already exists")
X(kErrorCodeStrDuplicateStrname,    0x0803, "STORAGE: This Storage Name already exists")
X(kErrorCodeStrMustSeparateXct,     0x0804, "STORAGE: This storage operation must be done in a separate transaction.")
X(kErrorCodeStrArrayInvalidOption,  0x0805, "STORAGE: Invalid Option for array storage")
X(kErrorCodeStrWrongMetadataType,   0x0806, "STORAGE: Metadata type does not match")
X(kErrorCodeStrUnsupportedMetadata, 0x0807, "STORAGE: This metadata type is not yet supported")
X(kErrorCodeStrTooLongPayload,      0x0808, "STORAGE: Payload of the record is too long")
X(kErrorCodeStrTooSmallPayloadBuffer, 0x0809, "STORAGE: The record's payload is larger than the buffer")
X(kErrorCodeStrTooShortPayload,     0x080A, "STORAGE: The record's payload is smaller than requested")
X(kErrorCodeStrKeyAlreadyExists,    0x080B, "STORAGE: This key already exists in this storage")
X(kErrorCodeStrKeyNotFound,         0x080C, "STORAGE: This key is not found in this storage")
X(kErrorCodeStrCuckooTooDeep,       0x080D, "STORAGE: HASH: The cuckoo depth is too deep")
X(kErrorCodeStrNothingToKickout,    0x080E, "STORAGE: HASH: There is nothing in the bucket to kickout")
X(kErrorCodeStrMasstreeRetry,       0x0811, "STORAGE: MASSTREE: Retry search. This is an internal error code used to retry find_border.")
X(kErrorCodeStrMasstreeTooManyRetries, 0x0812, "STORAGE: MASSTREE: Retrying too many times. Gave up")
X(kErrorCodeStrMasstreeFailedVerification, 0x0813, "STORAGE: MASSTREE: Failed verification. Found an inconsistency")
X(kErrorCodeStrMasstreeCursorTooDeep, 0x0814, "STORAGE: MASSTREE: Cursor encountered a too deep path")

X(kErrorCodeCacheNoFreePages,       0x0901, "SPCACHE: Not enough free snapshot pages. Cleaner is not catching up")
X(kErrorCodeCacheTableFull,         0x0902, "SPCACHE: Hashtable full or too many skewed inserts")

X(kErrorCodeXctReadSetOverflow,     0x0A01, "XCTION : Too large read-set. Check the config of XctOptions")
X(kErrorCodeXctWriteSetOverflow,    0x0A02, "XCTION : Too large write-set. Check the config of XctOptions")
X(kErrorCodeXctAlreadyRunning,      0x0A03, "XCTION : This thread is already running a transaction. Commit or abort it first.")
X(kErrorCodeXctNoXct,               0x0A04, "XCTION : This thread is not running any transaction.")
X(kErrorCodeXctRaceAbort,           0x0A05, "XCTION : Aborted a transaction because of a race condition. This is an expected error in highly contended case. You might retry the transaction.")
X(kErrorCodeXctPageVersionSetOverflow, 0x0A06, "XCTION : Too large page-version set. Consider using snapshot isolation.")
X(kErrorCodeXctPointerSetOverflow,  0x0A07, "XCTION : Too large pointer-set. Consider using snapshot isolation.")
X(kErrorCodeXctUserAbort,           0x0A08, "XCTION : User explicitly aborted a transaction.")

X(kErrorCodeDbgGperftools,          0x0B01, "DEBUG  : Gperftools reported an error")
